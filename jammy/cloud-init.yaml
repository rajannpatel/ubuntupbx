#cloud-config

# Ubuntu Pro token from: https://ubuntu.com/pro/dashboard (not needed for Ubuntu Pro instances on Azure, AWS, or Google Cloud)
{% set TOKEN = '' %}

# SMTP credentials
# sendgrid example: substitute `YOUR-API-KEY-HERE` with your API KEY, https://app.sendgrid.com/settings/api_keys
# {% set SMTP_HOST = 'smtp.sendgrid.net' %}
# {% set SMTP_PORT = '587' %}
# {% set SMTP_USERNAME = 'apikey' %}
# {% set SMTP_PASSWORD = 'YOUR-API-KEY-HERE' %}

# google mail / gmail example: substitute YOUREMAIL@GMAIL.COM and YOUR-APP-PASSWORD from: https://myaccount.google.com/apppasswords
# {% set SMTP_HOST = 'smtp.gmail.com' %}
# {% set SMTP_PORT = '587' %}
# {% set SMTP_USERNAME = 'YOUREMAIL@GMAIL.COM' %}
# {% set SMTP_PASSWORD = 'YOUR-APP-PASSWORD' %}

{% set SMTP_HOST = '' %}
{% set SMTP_PORT = '' %}
{% set SMTP_USERNAME = '' %}
{% set SMTP_PASSWORD = '' %}

# HOSTNAME: subdomain of FQDN (e.g. `server` for `server.example.com`)
{% set HOSTNAME = '' %}

# FQDN (e.g. `example.com` or `server.example.com`)
{% set FQDN = '' %}

{% set PRETTY_HOSTNAME = "My PBX Server" %}

# TIMEZONE: default value is fine
# As represented in /usr/share/zoneinfo. An empty string ('') will result in UTC time being used.
{% set TIMEZONE = 'America/New_York' %}

# FQDN could be a subdomain, so we determine the domain programmatically 
{% set parts = FQDN.split(".") %}
{% if parts|length > 1 %}
    {% set DOMAIN = parts[-2] + "." + parts[-1] %}
{% else %}
    {% set DOMAIN = FQDN %}
{% endif %}

hostname: {{ HOSTNAME }}
fqdn: {{ FQDN }}
pretty_hostname: {{ PRETTY_HOSTNAME }}

write_files:
  # Postfix uses sasl_passwd for authentication
  - path: /etc/postfix/sasl_passwd
    permissions: "0400"
    content: |
      [{{ SMTP_HOST }}]:{{ SMTP_PORT }} {{ SMTP_USERNAME }}:{{ SMTP_PASSWORD }}
  # The freebpx.service file to control FreePBX through systemctl
  - path: /etc/systemd/system/freepbx.service
    content: |
      [Unit]
      Description={{ PRETTY_HOSTNAME }}
      After=mariadb.service
      [Service]
      Type=oneshot
      RemainAfterExit=yes
      ExecStart=/usr/sbin/fwconsole start -q
      ExecStop=/usr/sbin/fwconsole stop -q
      [Install]
      WantedBy=multi-user.target
  - path: /etc/logrotate.d/asterisk
    content: |
    /var/log/asterisk/debug /var/log/asterisk/messages /var/log/asterisk/full /var/log/asterisk/*_log {
            weekly
            missingok
            rotate 4
            sharedscripts
            postrotate
                    /usr/sbin/invoke-rc.d asterisk logger-reload > /dev/null 2> /dev/null
            endscript
    }

apt:  
  conf: |
    APT {
      Get {
        Assume-Yes 'true';
        Fix-Broken 'true';
      }
    }
  # This section specifies additional apt sources (PPAs)
  sources:
    php:
      source: 'ppa:ondrej/php'

# run `apt update`
package_update: true

# run `apt upgrade`
package_upgrade: true

# reboot the system if required by presence of /var/run/reboot-required.
package_reboot_if_required: true

packages:
  - software-properties-common
  - php7.4
  - php7.4-bcmath
  - php7.4-cli
  - php7.4-curl
  - php7.4-gd
  - php7.4-intl
  - php7.4-ldap
  - php7.4-mbstring
  - php7.4-mysql
  - php7.4-xml
  - apache2
  - nodejs
  - npm
  - libapache2-mod-php7.4
  - curl
  - dirmngr
  - ffmpeg
  - git
  - lame
  - mpg123
  - sox
  - libicu-dev
  - sqlite3
  - mariadb-server
  - mariadb-client
  - odbc-mariadb
  - unixodbc
  - unixodbc-dev
  - postfix
  - bison
  - doxygen
  - flex
  - graphviz
  - libcfg-dev
  - libcorosync-common-dev
  - libcpg-dev
  - libjack-jackd2-dev
  - libldap2-dev
  - libosptk-dev
  - pkgconf
  - subversion
  - xmlstarlet
runcmd:
{% if platform == 'oracle' %}
  - iptables -F && netfilter-persistent save
{% endif %}
  # Allocate 2GB of space for a swap file
  - fallocate -l 2G /swapfile
  # Set permission of the swap file to be readable and writable only by the owner  
  - chmod 600 /swapfile
  # Create a Linux swap area on the file
  - mkswap /swapfile
  # Enable the swap file
  - swapon /swapfile
  # Add the swap file to the /etc/fstab file if it is not already there
  - grep -qxF '/swapfile none swap sw 0 0' /etc/fstab || sed -i -e "\$a/swapfile none swap sw 0 0" /etc/fstab
  # Enable source code repositories in the sources.list file and update the package list
  - sed -i '/deb-src/s/^# //' /etc/apt/sources.list && apt update
  # configure email
{% if SMTP_HOST %}
  - postconf -e myhostname="{{ FQDN }}"
  - postconf -e mydomain="{{ DOMAIN }}"
  - postconf -e myorigin="{{ DOMAIN }}"
  - postconf -e masquerade_domains="{{ DOMAIN }}"
  - postconf -e mydestination=localhost
  - postconf -e default_transport=smtp
  - postconf -e relay_transport=smtp
  - postconf -e relayhost="[{{ SMTP_HOST }}]:{{ SMTP_PORT }}"
  - postconf -e smtp_sasl_auth_enable=yes
  - postconf -e smtp_sasl_password_maps=hash:/etc/postfix/sasl_passwd
  - postconf -e header_size_limit=4096000
  - postconf -e smtp_sasl_security_options=noanonymous
  - postconf -e smtp_sasl_tls_security_options=noanonymous
  - postconf -e smtp_tls_security_level=encrypt
  - postconf -e smtp_use_tls=yes
  - postmap /etc/postfix/sasl_passwd
  - rm /etc/postfix/sasl_passwd
  - systemctl restart postfix.service
{% endif %}
  # Install build dependencies for Asterisk
  - DEBIAN_FRONTEND=noninteractive apt-get -y build-dep asterisk
  # Add a [MySQL] section to the /etc/odbcinst.ini file
  - bash -c "echo [MySQL] >> /etc/odbcinst.ini"
  # Add a Description line to the [MySQL] section of the /etc/odbcinst.ini file
  - bash -c "echo Description = ODBC for MySQL (MariaDB) >> /etc/odbcinst.ini"
  # Add a Driver line to the [MySQL] section of the /etc/odbcinst.ini file
  - bash -c "echo Driver = libmaodbc.so >> /etc/odbcinst.ini"
  # Add a FileUsage line to the [MySQL] section of the /etc/odbcinst.ini file
  - bash -c "echo FileUsage = 1 >> /etc/odbcinst.ini"
  # Download source files for Asterisk, move them to /usr/src, and clean up the directory
  - cd /tmp && apt-get -y source asterisk && mv asterisk*/ /usr/src
  - cd /usr/src/asterisk*
  - make distclean
  # Configure Asterisk with Jansson support
  - ./configure --with-jansson-bundled
  # Set up make options for Asterisk
  - make menuselect.makeopts
  # Enable certain modules and disable others in Asterisk
  - menuselect/menuselect --enable app_macro --enable CORE-SOUNDS-EN-ULAW --enable MOH-OPSOUND-ULAW --enable EXTRA-SOUNDS-EN-ULAW --disable-category MENUSELECT_CDR --disable-category MENUSELECT_CEL --disable res_snmp --disable chan_dahdi menuselect.makeopts
  # Create a user called 'asterisk' with no password and the comment "Asterisk User"
  - adduser asterisk --disabled-password --gecos "Asterisk User"
  # Install Asterisk, change the ownership of the /var/lib/asterisk directory, and clean up the source code
  - make && make install && chown -R asterisk. /var/lib/asterisk
  # Clone the FreePBX framework and create a modules.conf file
  - cd /usr/src && git clone -b release/16.0 --single-branch https://github.com/freepbx/framework.git freepbx
  - touch /etc/asterisk/modules.conf
  # Install and start FreePBX, and download and install various modules
  - cd /usr/src/freepbx
  - ./start_asterisk start
  - ./install -n
  - fwconsole ma downloadinstall pm2 framework customappsreg featurecodeadmin recordings soundlang calendar conferences core ivr infoservices queues ringgroups timeconditions asteriskinfo voicemail sipsettings logfiles dashboard music filestore backup
  - fwconsole chown
  - fwconsole reload
  # Increase the maximum file upload size for PHP applications running on Apache
  - sed -i 's/\(^upload_max_filesize = \).*/\120M/' /etc/php/7.4/apache2/php.ini
  # Increase the maximum amount of memory that PHP applications can use
  - sed -i 's/\(^memory_limit = \).*/\1256M/' /etc/php/7.4/apache2/php.ini
  # Set the user and group that Apache runs under to "asterisk"
  - sed -i 's/^\(User\|Group\).*/\1 asterisk/' /etc/apache2/apache2.conf
  # Allow Apache to process .htaccess files in web directories
  - sed -i 's/AllowOverride None/AllowOverride All/' /etc/apache2/apache2.conf
  # Enable the Apache "rewrite" module
  - a2enmod rewrite
  # Restart the Apache web server
  - systemctl restart apache2
  # Delete the default Apache index page
  - rm /var/www/html/index.html
  # Update the MySQL socket location in the ODBC configuration file
  - sed -i 's#Socket=/var/lib/mysql/mysql.sock#Socket=/var/run/mysqld/mysqld.sock#g' /etc/odbc.ini
  # unnecessary steps, because a full system reboot is happening
  # - fwconsole restart
  # - systemctl daemon-reload
  - systemctl enable freepbx
  # - crontab -l | { cat; echo "MAILTO="YOUREMAIL@GMAIL.COM"; } | crontab -
  - crontab -l | { cat; echo "@daily find /var/spool/asterisk/monitor -type f -size 44c -delete"; } | crontab -
  - crontab -l | { cat; echo "@daily find /var/spool/asterisk/monitor/*/*/*/ -type d -mtime +5 -exec rm -rf {} \; 2>/dev/null"; } | crontab -
  - crontab -l | { cat; echo "@daily find /var/spool/asterisk/monitor/*/ -type d -mtime +365 -exec rm -rf {} \; 2>/dev/null"; } | crontab -
  - crontab -l | { cat; echo "@daily find /var/spool/asterisk/voicemail -type f -name msg????.??? -mtime +45 -delete"; } | crontab -


# Reboot the instance
power_state:
  mode: reboot

ubuntu_pro:
{% if TOKEN %}
  token: {{ TOKEN }}
{% endif %}
  enable: [livepatch]

{% if "/" in TIMEZONE %}
timezone: {{ TIMEZONE }}
{% endif %}