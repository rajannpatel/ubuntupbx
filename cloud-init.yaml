## template: jinja
#cloud-config

# SET OUR VARIABLES
# =================

# Ubuntu Pro token from: https://ubuntu.com/pro/dashboard (not needed for Ubuntu Pro instances on Azure, AWS, or Google Cloud)
{% set TOKEN = '' %}

# SMTP credentials
# sendgrid example: substitute `YOUR-API-KEY-HERE` with your API KEY, https://app.sendgrid.com/settings/api_keys
# {% set SMTP_HOST = 'smtp.sendgrid.net' %}
# {% set SMTP_PORT = '587' %}
# {% set SMTP_USERNAME = 'apikey' %}
# {% set SMTP_PASSWORD = 'YOUR-API-KEY-HERE' %}

# google mail / gmail example: substitute YOUREMAIL@GMAIL.COM and YOUR-APP-PASSWORD from: https://myaccount.google.com/apppasswords
# {% set SMTP_HOST = 'smtp.gmail.com' %}
# {% set SMTP_PORT = '587' %}
# {% set SMTP_USERNAME = 'YOUREMAIL@GMAIL.COM' %}
# {% set SMTP_PASSWORD = 'YOUR-APP-PASSWORD' %}

{% set SMTP_HOST = '' %}
{% set SMTP_PORT = '' %}
{% set SMTP_USERNAME = '' %}
{% set SMTP_PASSWORD = '' %}

# CRONTAB_EMAIL address for daily crontab notifications
{% set CRONTAB_EMAIL = 'youremail@example.com' %}

# HOSTNAME: subdomain of FQDN (e.g. `server` for `server.example.com`)
# FQDN (e.g. `example.com` or `server.example.com`)
{% set HOSTNAME = 'voip' %}
{% set FQDN = 'voip.example.com' %}

{% set PRETTY_HOSTNAME = "My PBX Server" %}

# TIMEZONE: default value is fine
# As represented in /usr/share/zoneinfo. An empty string ('') will result in UTC time being used.
{% set TIMEZONE = 'America/New_York' %}

# TIME TO REBOOT FOR SECURITY AND BUGFIX PATCHES IN XX:XX FORMAT
{% set SECURITY_REBOOT_TIME = "03:00" %}

# =========================
# END OF SETTING VARIABLES

# FQDN could be a subdomain, so we determine the domain programmatically 
{% set parts = FQDN.split(".") %}
{% if parts|length > 1 %}
  {% set DOMAIN = parts[-2] + "." + parts[-1] %}
{% else %}
  {% set DOMAIN = FQDN %}
{% endif %}

hostname: {{ HOSTNAME }}
fqdn: {{ FQDN }}
pretty_hostname: {{ PRETTY_HOSTNAME }}

users:
  - name: asterisk
    gecos: "Asterisk User"
    groups: users
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    shell: /bin/bash
    lock_passwd: true

write_files:
  - path: /etc/postfix/sasl_passwd
    permissions: "0400"
    content: |
      [{{ SMTP_HOST }}]:{{ SMTP_PORT }} {{ SMTP_USERNAME }}:{{ SMTP_PASSWORD }}
  - path: /etc/systemd/system/freepbx.service
    permissions: "0644"
    content: |
      [Unit]
      Description={{ PRETTY_HOSTNAME }}
      After=mariadb.service
      [Service]
      Type=oneshot
      RemainAfterExit=yes
      ExecStart=/usr/sbin/fwconsole start -q
      ExecStop=/usr/sbin/fwconsole stop -q
      [Install]
      WantedBy=multi-user.target
  - path: /etc/odbcinst.ini
    permissions: "0644"
    content: |
      [MySQL]
      Description = ODBC for MySQL (MariaDB)
      Driver = libmaodbc.so
      FileUsage = 1
  - path: /root/schedule.txt
    permissions: "0644"
    content: |
      @daily (find /var/spool/asterisk/monitor/*/ -type d -mtime +365 -exec rm -rf {} + 2>/dev/null; find /var/spool/asterisk/monitor/*/*/*/ -type d -mtime +5 -exec rm -rf {} + 2>/dev/null; find /var/spool/asterisk/monitor -type f -size 44c -delete)
      @daily find /var/spool/asterisk/voicemail -type f -name msg????.??? -mtime +45 -delete
      @daily mysql -u root asteriskcdrdb -e 'DELETE FROM cdr WHERE calldate < DATE_SUB(NOW(), INTERVAL 1 DAY); optimize table cdr;'
      @daily mysql -u root asteriskcdrdb -e 'DELETE FROM cel WHERE eventtime < DATE_SUB(NOW(), INTERVAL 1 DAY); optimize table cel;'

apt:
  conf: |+
      APT::Periodic::Update-Package-Lists "1";
      APT::Periodic::Download-Upgradeable-Packages "1";
      APT::Periodic::AutocleanInterval "7";
      APT::Periodic::Unattended-Upgrade "1";
  sources:
    php:
      source: 'ppa:ondrej/php'

# `apt update && apt upgrade -y` and reboot if /var/run/reboot-required while provisioning
package_update: true
package_upgrade: true
package_reboot_if_required: true

ubuntu_pro:
{% if TOKEN %}
  token: {{ TOKEN }}
{% endif %}
  enable: [livepatch, esm-apps, esm-infra]

{% if "/" in TIMEZONE %}
timezone: {{ TIMEZONE }}
{% endif %}

packages:
  - postfix
  - apache2
  - mariadb-server
  - mariadb-client
  - odbc-mariadb
  - unixodbc
  - php8.2
  - php8.2-curl
  - php8.2-cli
  - php8.2-common
  - php8.2-mysql
  - php8.2-gd
  - php8.2-mbstring
  - php8.2-intl
  - php8.2-xml
  - php-pear
  - php-soap
  - php8.2-common
  - nodejs
  - npm
  - lame
  - ffmpeg
  - mpg123
  - sox
  - asterisk
  - asterisk-mp3
  - asterisk-moh-opsound-wav
  - asterisk-moh-opsound-gsm
  - asterisk-moh-opsound-g722

runcmd:
  - sed -i "s/^#\$nrconf{restart} = 'i';/\$nrconf{restart} = 'a';/" /etc/needrestart/needrestart.conf
  - needrestart -r a
  - sed -i 's|^//\s*Unattended-Upgrade::Remove-Unused-Kernel-Packages\s*".*";|Unattended-Upgrade::Remove-Unused-Kernel-Packages "true";|' /etc/apt/apt.conf.d/50unattended-upgrades
  - sed -i 's|^//\s*Unattended-Upgrade::Remove-New-Unused-Dependencies\s*".*";|Unattended-Upgrade::Remove-New-Unused-Dependencies "true";|' /etc/apt/apt.conf.d/50unattended-upgrades
  - sed -i 's|^//\s*Unattended-Upgrade::Remove-Unused-Dependencies\s*".*";|Unattended-Upgrade::Remove-Unused-Dependencies "true";|' /etc/apt/apt.conf.d/50unattended-upgrades
  - sed -i 's|^//\s*Unattended-Upgrade::Automatic-Reboot\s*".*";|Unattended-Upgrade::Automatic-Reboot "true";|' /etc/apt/apt.conf.d/50unattended-upgrades
  - sed -i 's|^//\s*Unattended-Upgrade::Automatic-Reboot-WithUsers\s*".*";|Unattended-Upgrade::Automatic-Reboot-WithUsers "true";|' /etc/apt/apt.conf.d/50unattended-upgrades
  - sed -i 's|^//\s*Unattended-Upgrade::Automatic-Reboot-Time\s*".*";|Unattended-Upgrade::Automatic-Reboot-Time "{{ SECURITY_REBOOT_TIME }}";|' /etc/apt/apt.conf.d/50unattended-upgrades
# public cloud and LXD images have ufw
  - ufw disable
  - apt remove ufw -y
  - apt purge ufw -y
# Oracle uses iptables
  - iptables -L | grep -q -v '^Chain' && iptables -F && netfilter-persistent save || echo "No iptables rules found; skipping commands."
# fallocate -l 2G of space for swap file
  - fallocate -l 2G /swapfile
# Set permission of the swap file to be readable and writable only by the owner  
  - chmod 600 /swapfile
# Create a Linux swap area on the file
  - mkswap /swapfile
# Enable the swap file
  - swapon /swapfile
# Add the swap file to the /etc/fstab file if it is not already there
  - grep -qxF '/swapfile none swap sw 0 0' /etc/fstab || sed -i -e "\$a/swapfile none swap sw 0 0" /etc/fstab
{% if SMTP_HOST %}
  - postconf -e myhostname="{{ FQDN }}"
  - postconf -e mydomain="{{ DOMAIN }}"
  - postconf -e myorigin="{{ DOMAIN }}"
  - postconf -e masquerade_domains="{{ DOMAIN }}"
  - postconf -e mydestination=localhost
  - postconf -e default_transport=smtp
  - postconf -e relay_transport=smtp
  - postconf -e relayhost="[{{ SMTP_HOST }}]:{{ SMTP_PORT }}"
  - postconf -e smtp_sasl_auth_enable=yes
  - postconf -e smtp_sasl_password_maps=hash:/etc/postfix/sasl_passwd
  - postconf -e header_size_limit=4096000
  - postconf -e smtp_sasl_security_options=noanonymous
  - postconf -e smtp_sasl_tls_security_options=noanonymous
  - postconf -e smtp_tls_security_level=encrypt
  - postconf -e smtp_use_tls=yes
  - postmap /etc/postfix/sasl_passwd
  - rm /etc/postfix/sasl_passwd
  - systemctl restart postfix.service
{% endif %}
  - chown -R asterisk:asterisk /etc/asterisk
  - chown -R asterisk:asterisk /var/{lib,log,spool}/asterisk
  - chown -R asterisk:asterisk /usr/lib64/asterisk
  - sed -i 's|#AST_USER|AST_USER|' /etc/default/asterisk
  - sed -i 's|#AST_GROUP|AST_GROUP|' /etc/default/asterisk
  - sed -i 's|;runuser|runuser|' /etc/asterisk/asterisk.conf
  - sed -i 's|;rungroup|rungroup|' /etc/asterisk/asterisk.conf
  - ldconfig
  - apt-get -y purge php8.3
  - rm -rf /etc/php/8.3
  - a2enmod php8.2
  - update-alternatives --set php /usr/bin/php8.2
  - sed -i 's/\(^upload_max_filesize = \).*/\120M/' /etc/php/8.2/apache2/php.ini
  - sed -i 's/\(emory_limit = \).*/\1256M/' /etc/php/8.2/apache2/php.ini
  - sed -i 's/^\(User\|Group\).*/\1 asterisk/' /etc/apache2/apache2.conf
  - sed -i 's/AllowOverride None/AllowOverride All/' /etc/apache2/apache2.conf
  - a2enmod rewrite
  - rm /var/www/html/index.html
  - systemctl restart apache2
  - systemctl stop asterisk
# Asterisk and FreePBX use /var/lib/asterisk/sounds/en/custom and not the `custom -> ../../../local/share/asterisk/sounds` symlink in /usr/share/asterisk/sounds/
  - rm -rf /usr/share/asterisk/sounds/custom; ln -s /var/lib/asterisk/sounds/en/custom /usr/share/asterisk/sounds/custom
# FreePBX expects default MOH files in /var/lib/asterisk/moh/default, but Ubuntu's deb package places them in /usr/share/asterisk/moh/
  - ln -s /usr/share/asterisk/moh /var/lib/asterisk/moh/asterisk-moh-opsound
  - chown -R asterisk:asterisk /usr/share/asterisk/moh && chown -R asterisk:asterisk /var/lib/asterisk/moh/
  - cd /usr/src && wget http://mirror.freepbx.org/modules/packages/freepbx/freepbx-17.0-latest.tgz && tar zxvf freepbx-17.0-latest.tgz
  - cd /usr/src/freepbx && ./start_asterisk start
  - while asterisk -rx 'core show version' 2>&1 | grep -Eq '(Unable to connect to remote asterisk|No such command)'; do echo 'Waiting for Asterisk core to be available'; sleep 2; done && cd /usr/src/freepbx && ./install -n
# FreePBX is unaware of Ubuntu Noble's new mysql socket location
  - sed -i 's|Socket=/var/lib/mysql/mysql.sock|Socket=/run/mysqld/mysqld.sock|' /etc/odbc.ini
  - fwconsole ma downloadinstall pm2 framework customappsreg featurecodeadmin recordings soundlang calendar conferences core ivr infoservices queues ringgroups timeconditions asteriskinfo voicemail logfiles dashboard music filestore backup sipsettings
  - systemctl enable freepbx
{% if CRONTAB_EMAIL %}
  - sed -i '1i MAILTO={{ CRONTAB_EMAIL }}' /root/schedule.txt
{% endif %}
  - crontab /root/schedule.txt && rm /root/schedule.txt
  - wget -P /var/spool/asterisk/backup/ https://raw.githubusercontent.com/rajannpatel/ubuntupbx/refs/heads/main/noble/ubuntupbx.core.backup.tar.gz
  - fwconsole backup --restore='/var/spool/asterisk/backup/ubuntupbx.core.backup.tar.gz'
  - echo "DELETE FROM ampusers;" | fwconsole mysql
  - echo "DELETE FROM kvstore_OOBE;" | fwconsole mysql
  - fwconsole chown
  - fwconsole restart
  - echo "cloud-init RUNCMD COMPLETED AT $(date)"